# Simple Tetris Project

## プロジェクト概要
React + Vite + TypeScript構成で作成された、最もシンプルなテトリスゲーム。

## 技術スタック
- **フロントエンド**: React 18.3.1
- **ビルドツール**: Vite 5.4.1
- **言語**: TypeScript 5.5.3
- **描画**: HTML5 Canvas API

## 実装機能
### ゲーム機能
- 7種類のテトリスピース（I, O, T, S, Z, J, L）
- ピースの自動落下、左右移動、回転
- ライン完成時の消去とスコア加算
- レベル上昇による落下速度増加
- ゲームオーバー判定とリセット機能
- 一時停止/再開機能

### UI/UX機能
- ゲーム開始ボタン
- リアルタイム描画（Canvas）
- スコア、レベル、ライン数表示
- 直感的なキーボード操作（矢印キー + P/R）
- 視覚的フィードバック（色分け、オーバーレイ）

## ファイル構成
```
src/
├── types.ts                    # 型定義
├── pieces.ts                   # ピース形状・色定義
├── gameLogic.ts               # ゲームロジック関数
├── pieceGenerator.ts          # ピース生成機能
├── useGameState.ts            # ゲーム状態管理フック
├── useGameLoop.ts             # 自動落下ループフック
├── useKeyboardControls.ts     # キーボード入力フック
├── renderer.ts                # Canvas描画機能
├── TetrisGame.tsx             # メインゲームコンポーネント
├── GameTest.tsx               # 開発テストコンポーネント
├── PieceTest.tsx              # ピーステストコンポーネント
├── App.tsx                    # アプリケーションルート
├── main.tsx                   # エントリーポイント
└── index.css                  # スタイル定義
```

## 操作方法
- **矢印キー ←→**: ピースの左右移動
- **矢印キー ↑**: ピースの回転
- **矢印キー ↓**: ピースの高速落下
- **P キー**: ゲームの一時停止/再開
- **R キー**: ゲームのリセット

## 開発・実行方法
```bash
# 依存関係のインストール
npm install

# 開発サーバーの起動
npm run dev

# ビルド
npm run build

# プレビュー
npm run preview
```

## アーキテクチャ設計
### 状態管理
- カスタムフック (`useGameState`) でゲーム状態を一元管理
- Reactの `useState` と `useCallback` を使用した効率的な状態更新

### ゲームループ
- `setInterval` による一定間隔での自動落下処理
- レベルに応じた動的な速度調整

### 描画システム
- Canvas APIによる直接描画
- フレームごとの完全再描画方式
- 色とセル境界線による視覚的区別

### イベント処理
- `window.addEventListener` によるグローバルキーボードイベント
- 衝突判定による移動・回転の制限

## 品質保証
- TypeScriptによる型安全性
- カスタムフックによる関心の分離
- 段階的開発とテストによる品質確保
- 人間による動作確認済み

## プロジェクト完成日
2025年6月1日

---
*このプロジェクトは、シンプルでありながら完全に機能するテトリスゲームとして設計され、教育目的やベースプロジェクトとして利用可能です。*
